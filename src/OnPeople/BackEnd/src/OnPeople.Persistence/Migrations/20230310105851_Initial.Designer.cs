// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnPeople.Persistence.Interfaces.Contexts;

#nullable disable

namespace OnPeople.Persistence.Migrations
{
    [DbContext(typeof(OnPeopleContext))]
    [Migration("20230310105851_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("OnPeople.Domain.Models.Cargos.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataEncerramento")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeCargo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Contas.Conta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativa")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataEncerramento")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Foto")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeCompleto")
                        .HasColumnType("TEXT");

                    b.Property<string>("Visao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Contas");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Contas.ContaFuncao", b =>
                {
                    b.Property<int>("ContaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FuncaoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContaId", "FuncaoId");

                    b.HasIndex("FuncaoId");

                    b.ToTable("ContasFuncoes");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Contas.Funcao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeFuncao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Funcoes");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Departamentos.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataEncerramento")
                        .HasColumnType("TEXT");

                    b.Property<int>("DiretorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GerenteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeDepartamento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sigla")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Empresas.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativa")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Filial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logotipo")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MatrizId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("TEXT");

                    b.Property<string>("PadraoEmail")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PresidenteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sigla")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Empresas.EmpresaConta", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmpresaId", "ContaId");

                    b.HasIndex("ContaId");

                    b.ToTable("EmpresasContas");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Empresas.EmpresaDepartamento", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmpresaId", "DepartamentoId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("EmpresasDepartamentos");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Funcionarios.DadoPessoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CPF")
                        .HasColumnType("TEXT");

                    b.Property<string>("CarteiraTrabalho")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataExpedicao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataExpedicaoCarteiraTrabalho")
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identidade")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ImpedimentoEleitora")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PisPasep")
                        .HasColumnType("TEXT");

                    b.Property<string>("TituloEleitor")
                        .HasColumnType("TEXT");

                    b.Property<string>("UfEmissao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DadosPessoais");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Funcionarios.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bairro")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaixaPostal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cep")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cidade")
                        .HasColumnType("TEXT");

                    b.Property<string>("Complemento")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComplementoEndereco")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriação")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FuncionarioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logradouro")
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pais")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoEndereco")
                        .HasColumnType("TEXT");

                    b.Property<string>("UF")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Funcionarios.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CargoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cpf")
                        .HasColumnType("TEXT");

                    b.Property<int>("DadoPessoalId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAdmissao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataDemissao")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FuncaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("ContaId");

                    b.HasIndex("DadoPessoalId");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FuncaoId");

                    b.HasIndex("MetaId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Funcionarios.FuncionarioMeta", b =>
                {
                    b.Property<int>("FuncionarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiasAcordado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiasEfetivo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FimAcordado")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FimEfetivo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InicioAcordado")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InicioEfetivo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MetaCumprida")
                        .HasColumnType("INTEGER");

                    b.HasKey("FuncionarioId", "MetaId");

                    b.HasIndex("MetaId");

                    b.ToTable("FuncionariosMetas");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Metas.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiasPlanejado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FimOficial")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FumPlanejado")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InicioOficial")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InicioPlanejado")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MetaAprovada")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MetaCumprida")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeMeta")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoMeta")
                        .HasColumnType("TEXT");

                    b.Property<string>("descricao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Metas");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Cargos.Cargo", b =>
                {
                    b.HasOne("OnPeople.Domain.Models.Departamentos.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Contas.Conta", b =>
                {
                    b.HasOne("OnPeople.Domain.Models.Empresas.Empresa", "Empresas")
                        .WithMany("Contas")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Contas.ContaFuncao", b =>
                {
                    b.HasOne("OnPeople.Domain.Models.Contas.Conta", "Conta")
                        .WithMany()
                        .HasForeignKey("ContaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnPeople.Domain.Models.Contas.Funcao", "Funcao")
                        .WithMany("ContasFuncoes")
                        .HasForeignKey("FuncaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conta");

                    b.Navigation("Funcao");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Departamentos.Departamento", b =>
                {
                    b.HasOne("OnPeople.Domain.Models.Empresas.Empresa", "Empresa")
                        .WithMany("Departamentos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Empresas.EmpresaConta", b =>
                {
                    b.HasOne("OnPeople.Domain.Models.Contas.Conta", "Contas")
                        .WithMany()
                        .HasForeignKey("ContaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnPeople.Domain.Models.Empresas.Empresa", "Empresas")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contas");

                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Empresas.EmpresaDepartamento", b =>
                {
                    b.HasOne("OnPeople.Domain.Models.Departamentos.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnPeople.Domain.Models.Empresas.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Funcionarios.Endereco", b =>
                {
                    b.HasOne("OnPeople.Domain.Models.Funcionarios.Funcionario", null)
                        .WithMany("Enderecos")
                        .HasForeignKey("FuncionarioId");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Funcionarios.Funcionario", b =>
                {
                    b.HasOne("OnPeople.Domain.Models.Cargos.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnPeople.Domain.Models.Contas.Conta", "Conta")
                        .WithMany()
                        .HasForeignKey("ContaId");

                    b.HasOne("OnPeople.Domain.Models.Funcionarios.DadoPessoal", "DadosPessoais")
                        .WithMany()
                        .HasForeignKey("DadoPessoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnPeople.Domain.Models.Departamentos.Departamento", "Departameto")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnPeople.Domain.Models.Empresas.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnPeople.Domain.Models.Contas.Funcao", "Funcao")
                        .WithMany()
                        .HasForeignKey("FuncaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnPeople.Domain.Models.Metas.Meta", null)
                        .WithMany("Funcionarios")
                        .HasForeignKey("MetaId");

                    b.Navigation("Cargo");

                    b.Navigation("Conta");

                    b.Navigation("DadosPessoais");

                    b.Navigation("Departameto");

                    b.Navigation("Empresa");

                    b.Navigation("Funcao");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Funcionarios.FuncionarioMeta", b =>
                {
                    b.HasOne("OnPeople.Domain.Models.Funcionarios.Funcionario", "Funcionario")
                        .WithMany("FuncionarioMetas")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnPeople.Domain.Models.Metas.Meta", "Meta")
                        .WithMany()
                        .HasForeignKey("MetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Contas.Funcao", b =>
                {
                    b.Navigation("ContasFuncoes");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Empresas.Empresa", b =>
                {
                    b.Navigation("Contas");

                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Funcionarios.Funcionario", b =>
                {
                    b.Navigation("Enderecos");

                    b.Navigation("FuncionarioMetas");
                });

            modelBuilder.Entity("OnPeople.Domain.Models.Metas.Meta", b =>
                {
                    b.Navigation("Funcionarios");
                });
#pragma warning restore 612, 618
        }
    }
}
